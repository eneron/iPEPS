function [tensor_A_updated,tensor_B_updated]=...
    update_cell_right(tensor_A,tensor_B,gate_tensor,...
    tensor_Env,EPSILON_CELL)
% 20141204: Incorrect calculations on the matrices M_A, N_A, etc.
%% gate on A-rightward-B
PHYS_DIM=size(tensor_A,1);
BOND_DIM=size(tensor_A,2);

vector_A=tensor_A(:);
vector_B=tensor_B(:);

tensor_AB_gate=ncon({tensor_A,tensor_B,gate_tensor},...
    {[1,-2,-3,-4,3],[2,-8,3,-6,-7],[-1,-5,1,2]});
tensor_Theta=ncon({tensor_AB_gate,tensor_Env},...
    {[-1,1,2,3,-5,5,6,4],[1,-2,2,-3,3,-4,4,-8,5,-6,6,-7]});

% Nonlinear conjugate gradient (ncg)
params.RelFuncTol=EPSILON_CELL;
out=ncg(@f_grad_f,...
    [real(vector_A);imag(vector_A);real(vector_B);imag(vector_B)],...
    params,'Display','final');
% out=ncg(@f_grad_f,...
%     [real(vector_A);imag(vector_A);real(vector_B);imag(vector_A)],...
%     params,'Display','off');

% updated tensor A, B and the normalization
tensor_A_updated=reshape(out.X(1:PHYS_DIM*BOND_DIM^4)+...
    1.0j*out.X(PHYS_DIM*BOND_DIM^4+1:2*PHYS_DIM*BOND_DIM^4),...
    [PHYS_DIM,BOND_DIM,BOND_DIM,BOND_DIM,BOND_DIM]);
tensor_A_updated=tensor_A_updated/max(abs(tensor_A_updated(:)));
tensor_B_updated=reshape(out.X(2*PHYS_DIM*BOND_DIM^4+1:3*PHYS_DIM*BOND_DIM^4)+...
    1.0j*out.X(3*PHYS_DIM*BOND_DIM^4+1:4*PHYS_DIM*BOND_DIM^4),...
    [PHYS_DIM,BOND_DIM,BOND_DIM,BOND_DIM,BOND_DIM]);
tensor_B_updated=tensor_B_updated/max(abs(tensor_B_updated(:)));

    function [fn,grad_fn]=f_grad_f(vectorized_AB)
        % Returns the objective function and its gradient.
        % Be cautious on the domain of the functions when using nested
        % functions like here: the nested function (inside) can use parent
        % variables; parent functions can use the variables inside the
        % children functions unless the variables is the output of the
        % children functions.
        
        % vectorized_AB=[real(vector_A);imag(vector_A);real(vector_B);imag(vector_B)]
        % vectorized_AB=randn([4*PHYS_DIM*BOND_DIM^4,1])
        
        vector_A_prime=vectorized_AB(1:PHYS_DIM*BOND_DIM^4)+...
            1.0j*vectorized_AB(PHYS_DIM*BOND_DIM^4+1:2*PHYS_DIM*BOND_DIM^4);
        vector_A_prime=vector_A_prime/max(abs(vector_A_prime(:)));
        vector_B_prime=vectorized_AB...
            (2*PHYS_DIM*BOND_DIM^4+1:3*PHYS_DIM*BOND_DIM^4)+...
            1.0j*vectorized_AB(3*PHYS_DIM*BOND_DIM^4+1:4*PHYS_DIM*BOND_DIM^4);
        vector_B_prime=vector_B_prime/max(abs(vector_B_prime(:)));
        
        tensor_A_prime=reshape(vector_A_prime,...
            [PHYS_DIM,BOND_DIM,BOND_DIM,BOND_DIM,BOND_DIM]);
        tensor_B_prime=reshape(vector_B_prime,...
            [PHYS_DIM,BOND_DIM,BOND_DIM,BOND_DIM,BOND_DIM]);
        tensor_a_prime=ncon({tensor_A_prime,conj(tensor_A_prime)},...
            {[1,-1,-2,-3,-4],[1,-5,-6,-7,-8]});
        tensor_b_prime=ncon({tensor_B_prime,conj(tensor_B_prime)},...
            {[1,-1,-2,-3,-4],[1,-5,-6,-7,-8]});
        
        % environment tensor E_a for the reduced tensor a
        tensor_E_A=ncon({tensor_Env,tensor_b_prime},...
            {[-1,-5,-2,-6,-3,-7,1,2,3,4,5,6],[1,-4,3,5,2,-8,4,6]});
        matrix_N_A=kron(...
            transpose(reshape(tensor_E_A,[BOND_DIM^4,BOND_DIM^4])),...
            eye(PHYS_DIM));
        % matrix_M_A should be positive semidefinite but is not; some massage?
        % The order of 'eye' in the above was checked by directly
        % calculating both A'*M_A*A and
        % ncon({tensor_E_A,tensor_A,conj(tensor_A)},...).
        
        tensor_G_A=ncon({tensor_Theta,conj(tensor_B_prime)},...
            {[-1,-2,-3,-4,1,2,3,4],[1,4,-5,2,3]});
        vector_G_A=reshape(tensor_G_A,[PHYS_DIM*BOND_DIM^4,1]);
        
        % environment tensor E_b for the reduced tensor b
        tensor_E_B=ncon({tensor_Env,tensor_a_prime},...
            {[1,2,3,4,5,6,-1,-5,-3,-7,-4,-8],[1,3,5,-2,2,4,6,-6]});
        matrix_N_B=kron(...
            transpose(reshape(tensor_E_B,[BOND_DIM^4,BOND_DIM^4])),...
            eye(PHYS_DIM));
        
        tensor_G_B=ncon({tensor_Theta,conj(tensor_A_prime)},...
            {[1,2,3,4,-1,-4,-5,-2],[1,2,3,4,-3]});
        vector_G_B=reshape(tensor_G_B,[PHYS_DIM*BOND_DIM^4,1]);
        
        fn=real(vector_A_prime'*matrix_N_A*vector_A_prime)...
            -2*real(vector_A_prime'*vector_G_A);
        
        grad_A=2*(matrix_N_A*vector_A_prime-vector_G_A);
        grad_B=2*(matrix_N_B*vector_B_prime-vector_G_B);
        
        grad_fn=[real(grad_A);imag(grad_A);...
            real(grad_B);imag(grad_B)];
    end
% tensor_a_updated=ncon({tensor_A_updated,conj(tensor_A_updated)},...
%     {[1,-1,-2,-3,-4],[1,-5,-6,-7,-8]});
% tensor_b_updated=ncon({tensor_B_updated,conj(tensor_B_updated)},...
%     {[1,-1,-2,-3,-4],[1,-5,-6,-7,-8]});
end